class Polynomial:
    def __init__(self, coefficients):
        if not coefficients:
            raise ValueError("系数列表不能为空")
        if not all(isinstance(c, (int, float)) for c in coefficients):
            raise TypeError("所有系数必须是数字")
        # 去除高次项的零系数
        while coefficients and coefficients[-1] == 0:
            coefficients.pop()
        self.coefficients = coefficients

    def __add__(self, other):
        if not isinstance(other, Polynomial):
            raise TypeError("只能与另一个 Polynomial 相加")
        from itertools import zip_longest
        result_coeffs = [a + b for a, b in zip_longest(
            self.coefficients, other.coefficients, fillvalue=0)]
        return Polynomial(result_coeffs)

    def derivative(self):
        if len(self.coefficients) == 1:
            return Polynomial([0])
        derived_coeffs = [i * c for i, c in enumerate(
            self.coefficients)][1:]
        return Polynomial(derived_coeffs)

    def evaluate(self, x):
        return sum(c * (x ** i) for i, c in enumerate(self.coefficients))

    def __str__(self):
        terms = []
        for i, c in enumerate(self.coefficients):
            if c != 0:
                term = f"{c}x^{i}" if i > 0 else f"{c}"
                terms.append(term)
        return " + ".join(terms) if terms else "0"

