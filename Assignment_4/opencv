import cv2
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from scipy.stats import norm

# Define global variables for storing mean, standard deviation, and axis scaling range
mu = 0
sigma = 1
x_scale = 6  # Control for the horizontal axis range in the interactive interface
y_scale = 8  # Control for the vertical axis range in the interactive interface

# Set initial window size
width, height = 600, 400

# Define the callback function for mouse click events
def mouse_click(event, x, y, flags, param):
    global mu, sigma
    if event == cv2.EVENT_LBUTTONDOWN:
        # Convert click coordinates to mean and standard deviation
        mu = (x - width // 2) / (width // 2) * x_scale  # Map based on scaling factor
        sigma = max(0.1, (height - y) / height * y_scale)  # Prevent sigma from being zero
        print(f"Selected mu: {mu}, sigma: {sigma}")
        update_normal_distribution(mu, sigma)

# Function to draw the coordinate plane with ticks and labels
def draw_plane():
    img = np.ones((height, width, 3), np.uint8) * 255

    # Draw x and y axes
    cv2.line(img, (0, height // 2), (width, height // 2), (0, 0, 0), 2)  # x-axis
    cv2.line(img, (width // 2, 0), (width // 2, height), (0, 0, 0), 2)  # y-axis

    # Label horizontal and vertical axes
    cv2.putText(img, 'Mean (mu)', (width - 100, height // 2 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1)
    cv2.putText(img, 'Std Dev (sigma)', (width // 2 + 10, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1)

    # Draw ticks and labels for x-axis based on scaling
    for i in range(-x_scale, x_scale + 1):
        x_pos = int(width // 2 + (i / x_scale) * (width // 2))
        cv2.line(img, (x_pos, height // 2 - 5), (x_pos, height // 2 + 5), (0, 0, 0), 2)  # Tick
        cv2.putText(img, f'{i}', (x_pos - 10, height // 2 + 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)  # Label

    # Draw ticks and labels for y-axis based on scaling
    for i in range(0, y_scale + 1):
        y_pos = int(height - (i / y_scale) * height)
        cv2.line(img, (width // 2 - 5, y_pos), (width // 2 + 5, y_pos), (0, 0, 0), 2)  # Tick
        cv2.putText(img, f'{i}', (width // 2 + 10, y_pos + 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)  # Label

    return img

# Initialize Matplotlib plot with Sliders for axis scaling
def init_plot():
    global line, x_slider, y_slider
    x = np.linspace(-10, 10, 500)
    y = norm.pdf(x, mu, sigma)

    # Set initial x-axis and y-axis range
    fig, ax = plt.subplots()
    plt.subplots_adjust(left=0.1, bottom=0.25)  # Leave space for sliders
    ax.set_xlim(-x_scale, x_scale)  # Initialize x-axis range
    ax.set_ylim(0, 0.5)  # Initialize y-axis range
    ax.set_title("Normal Distribution")
    ax.set_xlabel("x")
    ax.set_ylabel("Probability Density")

    # Draw initial normal distribution curve
    line, = ax.plot(x, y, lw=2)
    plt.grid(True)
    plt.ion()  # Enable interactive mode

    # Add Sliders for dynamic adjustment of x and y axis ranges
    axcolor = 'lightgoldenrodyellow'
    ax_xscale = plt.axes([0.1, 0.1, 0.65, 0.03], facecolor=axcolor)
    ax_yscale = plt.axes([0.1, 0.05, 0.65, 0.03], facecolor=axcolor)

    x_slider = Slider(ax_xscale, 'X Scale', 1, 20, valinit=x_scale, valstep=1)
    y_slider = Slider(ax_yscale, 'Y Scale', 0.1, 1, valinit=0.5, valstep=0.1)

    # Update axis range when sliders change
    x_slider.on_changed(update_plot_scale)
    y_slider.on_changed(update_plot_scale)

    plt.show(block=False)  # Ensure main program is not blocked

# Function to update the normal distribution plot
def update_normal_distribution(mu, sigma):
    global line
    x = np.linspace(-10, 10, 500)
    y = norm.pdf(x, mu, sigma)

    # Update curve data
    line.set_data(x, y)
    plt.draw()  # Redraw plot
    plt.pause(0.01)  # Enable dynamic updates for animation effect

# Update plot's x and y axis range when slider values change
def update_plot_scale(val):
    global x_slider, y_slider
    x_scale_val = x_slider.val
    y_scale_val = y_slider.val
    plt.gca().set_xlim(-x_scale_val, x_scale_val)
    plt.gca().set_ylim(0, y_scale_val)
    plt.draw()

# OpenCV slider callback for adjusting axis scaling in the interactive interface
def on_xscale_change(val):
    global x_scale
    x_scale = val

def on_yscale_change(val):
    global y_scale
    y_scale = val

# Main function
def main():
    global mu, sigma, x_scale, y_scale

    # Initialize OpenCV window
    cv2.namedWindow('Select Mean and Std Dev')
    cv2.setMouseCallback('Select Mean and Std Dev', mouse_click)

    # Create OpenCV sliders for x and y axis scaling
    cv2.createTrackbar('X Scale', 'Select Mean and Std Dev', x_scale, 20, on_xscale_change)
    cv2.createTrackbar('Y Scale', 'Select Mean and Std Dev', y_scale, 20, on_yscale_change)

    # Initialize Matplotlib plot
    init_plot()

    # Main loop
    while True:
        img = draw_plane()  # Draw coordinate plane
        cv2.imshow('Select Mean and Std Dev', img)

        # Wait for user input
        key = cv2.waitKey(10)
        if key == 27:  # Press Esc to exit
            break

    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
