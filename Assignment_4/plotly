import numpy as np
import plotly.graph_objs as go
import ipywidgets as widgets
from ipywidgets import interact, VBox, HTML
from IPython.display import display

# Function to plot the normal distribution with Plotly
def draw_normal_plotly(mean, std_dev):
    # Generate data points for the normal distribution
    x = np.linspace(mean - 4*std_dev, mean + 4*std_dev, 500)
    y = (1/(std_dev * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean)/std_dev)**2)
    
    # Create Plotly figure
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x, y=y, mode='lines', name='Normal Distribution'))
    
    # Add a line indicating the mean
    fig.add_vline(x=mean, line=dict(color='red', dash='dash'), name='Mean')
    
    # Update the layout of the figure
    fig.update_layout(
        title=f"Normal Distribution (Mean: {mean}, Std Dev: {std_dev})",
        xaxis_title="x",
        yaxis_title="Probability Density",
        template="plotly_white",
        showlegend=True
    )
    
    # Display the figure
    fig.show()

# Function to update the plot based on slider values
def update(mean, std_dev):
    draw_normal_plotly(mean, std_dev)

# Create sliders for interactive control of mean and standard deviation
mean_slider = widgets.FloatSlider(value=0, min=-5, max=5, step=0.1, description='Mean')
std_slider = widgets.FloatSlider(value=1, min=0.1, max=2, step=0.1, description='Std Dev')
reset_button = widgets.Button(description="Reset")

# Reset sliders and update plot
def reset_values(b):
    mean_slider.value = 0
    std_slider.value = 1
    update(mean_slider.value, std_slider.value)  # Update the plot after resetting

reset_button.on_click(reset_values)

# Set up interactive controls
interact(update, mean=mean_slider, std_dev=std_slider)

# Display the sliders and reset button in a vertical box
display(VBox([mean_slider, std_slider, reset_button]))

